// Code generated by MockGen. DO NOT EDIT.
// Source: repositories/task-repository.go

// Package repositories_mocks is a generated GoMock package.
package repositories_mocks

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	entities "github.com/manabie-com/togo/entities"
)

// MockITaskRepository is a mock of ITaskRepository interface.
type MockITaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITaskRepositoryMockRecorder
}

// MockITaskRepositoryMockRecorder is the mock recorder for MockITaskRepository.
type MockITaskRepositoryMockRecorder struct {
	mock *MockITaskRepository
}

// NewMockITaskRepository creates a new mock instance.
func NewMockITaskRepository(ctrl *gomock.Controller) *MockITaskRepository {
	mock := &MockITaskRepository{ctrl: ctrl}
	mock.recorder = &MockITaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITaskRepository) EXPECT() *MockITaskRepositoryMockRecorder {
	return m.recorder
}

// CountTaskByUserIdAndCreatedAt mocks base method.
func (m *MockITaskRepository) CountTaskByUserIdAndCreatedAt(userId uint64, createdAt time.Time) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTaskByUserIdAndCreatedAt", userId, createdAt)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTaskByUserIdAndCreatedAt indicates an expected call of CountTaskByUserIdAndCreatedAt.
func (mr *MockITaskRepositoryMockRecorder) CountTaskByUserIdAndCreatedAt(userId, createdAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTaskByUserIdAndCreatedAt", reflect.TypeOf((*MockITaskRepository)(nil).CountTaskByUserIdAndCreatedAt), userId, createdAt)
}

// CreateTask mocks base method.
func (m *MockITaskRepository) CreateTask(task *entities.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTask", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTask indicates an expected call of CreateTask.
func (mr *MockITaskRepositoryMockRecorder) CreateTask(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTask", reflect.TypeOf((*MockITaskRepository)(nil).CreateTask), task)
}

// GetAllTask mocks base method.
func (m *MockITaskRepository) GetAllTask() ([]entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTask")
	ret0, _ := ret[0].([]entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTask indicates an expected call of GetAllTask.
func (mr *MockITaskRepositoryMockRecorder) GetAllTask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTask", reflect.TypeOf((*MockITaskRepository)(nil).GetAllTask))
}
